在编程中，程序的执行流程通常遵循以下规则：

由上到下：程序按照代码的顺序，从上到下执行。这是最基本的执行流程。

由内到外：当程序遇到控制流语句（如循环、条件语句、函数调用等）时，它会先执行这些语句内部的代码，然后再返回到外部继续执行。

由内向外的循环：在循环结构中，程序会先执行循环体内的代码，然后根据循环条件判断是否继续执行下一次迭代。循环会一直执行，直到不再满足循环条件。

条件语句：在 if 或 switch 等条件语句中，程序会根据条件表达式的值来决定执行哪个分支。如果条件为真，则执行相应的代码块；如果条件为假，则跳过该代码块，继续执行后续的代码。

函数调用：当程序调用一个函数时，它会执行该函数内的代码，然后返回到调用点继续执行。

以您提供的代码为例：

c
for (int z = -100; z < 101; z++) {
    if (a * x + b * y + c * z == -d) {
        printf("%d %d %d", x, y, z);
        return 0;
    }
}
由内到外：对于每个 z 的值，程序首先执行 if 语句内部的代码（检查方程是否成立）。
由上到下：如果 if 条件为假，程序会继续执行 if 语句之后的代码，即 for 循环的下一次迭代。
这种执行流程确保了程序能够按照预期的逻辑顺序运行，同时也允许通过控制流语句来改变执行顺序，以实现更复杂的逻辑。

题目描述
给你一个方程ax+by+cz+d=0，给你abcd的值，让你找到一个满足的解
若有多个满足要求的，仅输出一个答案，要求x尽可能小，在x相等的情况下y尽可能小，在x,y都相等的情况下z尽可能小
输入
对于每一组数据，输入四个数a,b,c,d
1<=a,b,c,d<=100
输出
对于每一组数据，输出一个满足要求的解，若在-100到100之间没有满足要求的解，输出-1
#include <stdio.h>

int main()
{
    int a, b, c, d;

    scanf("%d%d%d%d", &a, &b, &c, &d);

    for (int x = -100; x < 101; x++)

    {

        for (int y = -100;y < 101; y++)
        {

            for ( int z = -100;z < 101; z++)
当里面的 for 结构因为 z 加到 101 而结束后，运行外面的 for 结构，然后又回到里面的 for 结构时，z 会从 -100 重新开始。
原因如下：
在 C 语言中，for 循环在每次进入循环体时，都会重新执行初始化表达式。
对于内层的 for (int z = -100; z < 101; z++)，
每次外层循环的 y 值变化时，内层循环都会重新开始，
重新初始化 z 为 -100，然后再根据条件 z < 101 进行判断并执行循环体。
这是 for 循环的标准行为，确保了循环变量在每次循环开始时都处于初始状态，以便进行下一轮的循环操作。
            {
                if (a * x + b * y + c * z == -d)为真则执行if模块否则返回外一级的for。
                {
                    printf("%d %d %d", x, y, z);
                    return 0;
                }
            }
        }
    }

printf("-1");
    return 0;
}
